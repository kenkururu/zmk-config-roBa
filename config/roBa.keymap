#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mkp_input_listener { input-processors = <&zip_temp_layer 1 500>; };

#define MOUSE 1
#define SCROLL 8
#define NUM 4

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&lt {
    quick-tap-ms = <300>;
    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        to-l6 {
            bindings = <&mo 6>;
            key-positions = <30 31>;
        };

        tog-l2 {
            bindings = <&tog 2>;
            key-positions = <18 19>;
        };

        snipe {
            bindings = <&mo 3>;
            key-positions = <33 32>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                        &kp T                                                            &kp T        &kp R  &kp U  &kp S             &kp W
&kp A             &kp S         &kp D         &kp F                        &kp G        &kp LS(LG(S))                      &kp LEFT_WIN     &kp K        &kp O  &kp A  &kp I             &kp E
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                        &kp B        &kp COLON                          &lt 6 MINUS      &lt 4 SPACE  &kp N  &kp M  &mt LEFT_SHIFT H  &lt 7 Y
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 4 INT_HENKAN  &lt 6 SPACE  &lt_to_layer_0 5 INT_MUHENKAN      &lt 5 BACKSPACE  &lt 3 ENTER                                  &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                     &trans  &trans    &trans    &none  &none
&trans  &trans  &trans  &trans  &trans  &trans      &none  &none   &mkp MB1  &mkp MB2  &none  &mo 8
&trans  &trans  &trans  &trans  &trans  &trans      &none  &none   &mkp MB1  &mkp MB2  &none  &mo 8
&trans  &trans  &trans  &trans  &trans  &trans      &none  &none                              &none
            >;
        };

        mouse-to {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &mo 8
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &mo 8
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        input2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                              &kp RA(ENTER)  &kp F  &kp COMMA  &kp Q  &kp P
&trans  &trans  &trans  &trans  &trans  &trans      &kp LEFT_WIN    &kp G          &kp J  &kp D      &kp L  &kp PERIOD
&trans  &trans  &trans  &trans  &trans  &trans      &kp LEFT_SHIFT  &kp B          &kp C  &kp V      &kp X  &kp Z
&trans  &trans  &trans  &trans  &trans  &trans      &kp JP_AT       &none                                   &mt RCTRL DEL
            >;
        };

        NUM {
            bindings = <
&trans  &trans        &trans        &trans        &trans                               &kp JP_EQUAL  &kp N7        &kp N8        &kp N9        &kp MINUS
&trans  &trans        &trans        &trans        &trans  &trans      &none            &kp SLASH     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp JP_PLUS
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &kp JP_ASTERISK  &none         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N0
&trans  &trans        &trans        &trans        &trans  &trans      &trans           &none                                                   &kp PERIOD
            >;
        };

        func {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                            &kp F12      &kp F7  &kp F8  &kp F9  &kp LEFT_SHIFT
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans       &kp F11      &kp F4  &kp F5  &kp F6  &kp LEFT_ALT
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &kp JP_EISU  &kp F10      &kp F1  &kp F2  &kp F3  &kp RCTRL
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans       &kp JP_KANA                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        arrow {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                &kp SEMI       &kp LEFT_ALT      &kp UP_ARROW          &kp TAB          &kp PSCRN
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp HOME     &kp JP_COLON   &kp LEFT_ARROW    &mt RCTRL DOWN_ARROW  &kp RIGHT_ARROW  &kp LEFT_WIN
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &none        &kp END        &kp LS(NUMBER_1)  &kp LS(SLASH)         &kp JP_YEN       &kp LS(NUBS)
&trans                      &trans           &trans           &trans           &trans        &trans                       &kp PAGE_UP  &kp PAGE_DOWN                                                           &kp JP_UNDERSCORE
            >;
        };

        UNIQ {
            bindings = <
&trans  &trans  &trans  &trans  &trans                             &trans          &trans        &kp JP_LBRACKET         &kp JP_RBRACKET            &kp JP_CARET
&trans  &trans  &trans  &trans  &trans  &trans      &kp LESS_THAN  &kp GT          &kp JP_LBRACE        &kp JP_RBRACE         &kp PERCENT       &kp HASH
&trans  &trans  &trans  &trans  &trans  &trans      &kp JP_LPAREN  &kp JP_RPAREN   &kp JP_QUOTE  &kp JP_DQUOTE  &kp JP_AMPERSAND  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &kp CAPS       &kp SCROLLLOCK                                                 &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                            &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans        &trans                                                  &bt BT_CLR
            >;
        };
    };
};
